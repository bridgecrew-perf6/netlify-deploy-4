# Metadata
name: Deploy to Netlify
description: Create a new deployment on Netlify using the Netlify CLI

# Define inputs
inputs:
  token:
    description: "Your access token. Should be passed as a GitHub secret"
    required: true
    type: string
  site-id:
    description:
      "Override the site ID. Deploys using the ID present in the current working
      directory"
    required: false
    type: string
  production:
    description: "Whether to deploy as a production site or not"
    required: false
    default: false
    type: boolean
  dir:
    description: "Directory to deploy"
    required: true
    type: string
  functions-dir:
    description: "Functions directory to deploy. Defaults to './functions'"
    required: false
    default: "./functions"
    type: string
outputs:
  preview-url:
    description: Preview URL of the deployed site
    value: null
  site-url:
    description: Production URL of the deployed site
    value: null
  log-url:
    description: Log URL of the deployed site
    value: null
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3.0.2
    - uses: actions/cache@v3
      id: cache
      with:
        path: ~/.pnpm-store
        key: ${{ hashFiles('**/pnpm-lock.yaml') }}
    - uses: pnpm/action-setup@v2.2.1
      with:
        version: "7.0.1"
    - uses: actions/setup-node@v3
      with:
        node-version: 16
    - run: pnpm install --prod --frozen-lockfile --prefer-offline
      shell: bash
    - id: deploy
      env:
        NETLIFY_AUTH_TOKEN: ${{ inputs.token }}
        NETLIFY_SITE_ID: ${{ inputs.site-id }}
      run: |
        echo "::set-output name=data::$(./deploy '{"production":"${{inputs.production }}","dir":"${{ inputs.dir }}","functions":"${{ inputs.functions-dir }}"}')"
      shell: bash
    - run: |
        echo "::set-output name=preview-url::$(echo '${{ steps.deploy.outputs.data }}' | jq '.deploy_url')"
        echo "::set-output name=site-url::$(echo '${{ steps.deploy.outputs.data }}' | jq '.url')"
        echo "::set-output name=log-url::$(echo '${{ steps.deploy.outputs.data }}' | jq '.logs')"
      shell: bash
